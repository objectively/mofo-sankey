{"version":3,"sources":["node_modules/d3-format/src/formatDecimal.js","node_modules/d3-format/src/exponent.js","node_modules/d3-format/src/formatGroup.js","node_modules/d3-format/src/formatNumerals.js","node_modules/d3-format/src/formatSpecifier.js","node_modules/d3-format/src/formatTrim.js","node_modules/d3-format/src/formatPrefixAuto.js","node_modules/d3-format/src/formatRounded.js","node_modules/d3-format/src/formatTypes.js","node_modules/d3-format/src/identity.js","node_modules/d3-format/src/locale.js","node_modules/d3-format/src/defaultLocale.js","node_modules/d3-format/src/precisionFixed.js","node_modules/d3-format/src/precisionPrefix.js","node_modules/d3-format/src/precisionRound.js","node_modules/d3-format/src/index.js","sunburst/sunburst.js"],"names":["x","Math","abs","round","toLocaleString","replace","toString","formatDecimalParts","p","i","toExponential","indexOf","coefficient","slice","length","NaN","grouping","thousands","value","width","t","j","g","max","push","substring","reverse","join","numerals","re","formatSpecifier","specifier","match","exec","Error","FormatSpecifier","fill","align","sign","symbol","zero","comma","precision","trim","type","prototype","undefined","s","out","n","i0","i1","prefixExponent","d","exponent","min","floor","Array","toFixed","formatDecimal","toPrecision","formatRounded","formatPrefixAuto","toUpperCase","map","prefixes","locale","group","identity","call","Number","currencyPrefix","currency","currencySuffix","decimal","String","percent","minus","nan","newFormat","formatTypes","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","format","valuePrefix","valueSuffix","c","valueNegative","isNaN","charCodeAt","Infinity","padding","formatPrefix","f","e","k","pow","defaultLocale","definition","step","console","log"],"mappings":";;AgBAA;;AAEAwG,OAAO,CAACC,GAAR,CAAYlB,gBAAZ;;;AfFA,ACAe,ACAA,AIAf,AHAA,ACAA,AGAA,ACAe,ACAf,AEAA,ACAA,ACAA,kBZAwBvE,ACAAY,AMAA5B,CAAT,EAAY,KPAZ,ACAA,EDAmBiB,ACAA,SDAnB,EAA8B;ASA7C,AXAe,AECb,ACAA,AGDF,AFCA,ACAe,AIAb,ILAEY,EAAE,GFAG,ACAA,ACAA,AKAA7B,CAAP,QTDsBA,AKCA+C,CLDT,AECG7B,ACAAA,AEAH,ELDY,AKCA,GHAlB,ACAA,EDAgBC,ACAA,KDAhB,EAAuB,kDEAhC;AHCe,ADDb,AECE,ACAA,AIAW,AFAb6B,AGDF,ACCC,ACDD,ELCEA,GAAG,EAAE,CHACvC,CFDCR,AECA,ECAEiB,CDACA,AGAA,CLDC,CAAChB,EGCE,AEAA+C,CLDP,AECQ,ACAA5C,AEAA,CJAOL,ADDNA,AECAc,AKAMd,CNAT,ADDI,AOCJ,CFAK+C,CJAO,AMAAvC,AFAN,CLDCP,AOCP,AFAOa,EHAlB,ACAO,AIAmB,CJAL,CHDC,CAACX,CKCf,EAAkBM,CAAC,CLDT,CAAWT,AGCtB,CHDW,AKCY,CLDzB,AGC0B,AEAvB,EAAyBkD,EAAE,CLDC,EKCE,CAAC,CLDlC,AKCG,CFAgCzC,CAAT,AEAW0C,CLAtCnD,CAAC,AGAsC,AEAxC,CLAGI,CKAwCK,CAAC,GAAGwC,CAA/C,EAAkD,EAAExC,CAApD,EAAuD,CLAtD,CAAiB,IAAjB,EAAuBJ,OAAvB,CAA+B,IAA/B,EAAqC,EAArC,CADC,GAEDL,CAAC,CAACM,QAAF,CAAW,EAAX,CAFN;ACEA,ADCD,AEFG,ACCE,AGDC,ACCL,AHAa,ACAX,ELGJ,EMJW8C,ECCLC,CAAC,CLACjC,CDACpB,ACAA,AEAe8B,CHAd,AMAA,ELAE,AGAAiB,CJAC,AEAAnB,AEAA,CHDT,AGCUnB,CAAD,CAAT,ECDG,GHCc,CAAC,CAACA,CAAF,ACAN,CDAT,ACAkCsB,SAAzB,EAAoC,aGAtB/B,CAAnB,ENAsBC,AMAAO,CAAtB,CAAR,ENAkC,CAACN,GAAL,CAASF,CAAT,CAAnB,CAAJ,EAAqCA,CAAC,GAAGA,CAAC,CAAC,CAAD,CAAJ,GAAUe,GAAvD;AACD,ADGD,AELI,ACEC,AIAH,AHAA,ACAI,AGFN,AEAA,AEAe,ACAA,ACAA,KXAJ,CAAP,AIEE,AHAA,CGACsC,CLAChC,AKAN,AHAMW,CFAC,CKAC,CFAC,CHAC,CAFR,AEES,CCAP,EDAUH,CGAC7B,CAAC,AHAA,AQFMuG,ACAAA,ACAAA,CVELtE,EGAE,CKFN,ACAA,ACAA,CPEL,AHAM,CAAQF,AQFM,ACAAb,ACAAK,GAAf,EDAA,ACAoB,EDAE,ETErB,CAAV,CAAJ,EAAmC,MAAM,IAAIW,KAAJ,CAAU,qBAAqBH,SAA/B,CAAN;AOFrC,AXMA,AENI,ACGD,AIAD,AHAA,ACDcmB,AODd,ACAA,ACAAqD,EAAAA,CXFA,CQCErC,EJGEtD,AHAAoB,AUFA,EZEEV,AGDQ4B,CHCP,AUFAjD,ACAAA,ACAAA,CHDT,ANEkB,CDChB,CFAUe,CGDSmC,AODR,ACAA,ACAA,CFAC5B,ACAAA,ACAArB,CTCS,EECN,AKFR,ACAA,ACAA,CTCiBO,AODR,ACAA,ACAA8F,CTCF,AODP,ACAA,CXEW,AKAAlD,CLAC,AKAA,AKFA,ACAApD,CXED,AKAE,AKFA,AEAb,CZDL,AKGiB,AOFnB,CPEA,CMFuB,ACAAsB,CDACA,ECAE,CDAP,CAAS,CAAC,ACAAtB,CDAV,EAAaA,CCAC,CAACC,EDAE,CAACqD,ACAR,CAAShC,EDAN,CAAS,ACAZ,CDAG,CDAHtB,CCAeA,CCACsG,EFAZ,CAACrG,ACAc,CAACsD,ACAjD,EFA6B,CAAS+C,ECAM,CAAW,CDA1B,CAAT,CAAb,CAAP,mBCAgErF,KAAT,IAAkB,CAA7B,CAAZ,CAAb,IAA6D,CAA7D,GAAiE,uBAASjB,IAAI,CAACC,GAAL,CAASqG,IAAT,CAAT,CAA7E,CAAP;AFAK,ATDH,ACIH,AGFc,ACCb,AHCA,ACF2B,AKD7B,AECC,ACAA,ACAC,IHDShB,EJGLjC,ELAExC,CEAC,AUFAb,CHDF,GPGMkC,AUFA,CZEC,AKAA,AOFAZ,GZEG,AKAA8B,AOFR,CZFL,AIEoBrD,ACEN,AOFA,CRAH,ACEI,AOFV,CPES,CDFSQ,ACCzB,AODmB,CRAN,EAAe,IFErB,CAAoB,eUFCe,GAAT,IAAgB,uBAASgF,IAAT,CAA5B,IAA8C,CAArD;ARCA,ACEA,AHAEnE,AUFH,IVEGA,EEFEiB,CAAC,CFEC,CGACC,CDFC,AFEAtB,KAAK,CAAC,CGAC,AHAF,CADc,EGCT,CAAX,GAAe,OAAO,IAAIyB,KAAJ,CAAU,CAACH,ODFbtD,CAAnB,ACEqB,EDFCQ,ACEoBmB,CDF1C,CAAR,ECE6B,CAA0B,GAA1B,CAAP,GAAwCf,WAAvD,GACDA,WAAW,CAACE,MAAZ,GAAqBwC,QAAQ,GAAG,CAAhC,GAAoC1C,WAAW,CAACC,KAAZ,CAAkB,CAAlB,EAAqByC,QAAQ,GAAG,CAAhC,IAAqC,GAArC,GAA2C1C,WAAW,CAACC,KAAZ,CAAkByC,QAAQ,GAAG,CAA7B,CAA/E,GACA1C,WAAW,GAAG,IAAI6C,KAAJ,CAAUH,QAAQ,GAAG1C,WAAW,CAACE,MAAvB,GAAgC,CAA1C,EAA6Ca,IAA7C,CAAkD,GAAlD,CAFpB;AIHK,AXKA,AEDH,AIFF,ACID,AHFGU,ACHE,AKDN,ICAW2D,APIP3D,EEFE,CAACgB,CAAL,CNGc9C,AIDP,CEFC,CJECE,AEAAuB,ACHA,CHGC,EGHN,CHGS,AMJA,CGAR,ATII,AEAK,CEFChC,AFEA,CEFC,AFEF,CAFa,CFETsB,CAAC,AIFA,EAAX,CJEc,CAApB,EFCG,AEDoB,CFCQtB,CAA5B,EAA+BQ,CAA/B,EAAkC;AACvC,AEDI,AIFJ,AFEE8B,ACJY,AGAd,IJIEA,EJCE,AMHA1B,CNGCH,AQLA,CRKC,AIDA,EFAEK,AEAAkB,CJCC,CAAChC,AKLQkD,CLKP,CKLS,CDIP,CJCC1C,AEDA,AEAA,CJCC,AMHA,AFEF,CAHc,AIDrBR,CNIWsB,AGJQ,AGApB,CRKatB,AEDV,AIFUqD,ADFJ,CLKK,AMHA,AEFV7C,CRKWE,AMHA,ADFQwC,AGAvB,CNIgB,AIFF,CJEX,AIFR,ADF8B,GHIL/B,AGJQV,CAAL,IHIxB,EAA4Ba,CFCd,AEDe,CFCCd,CAAC,CEDCP,EFCE,CAApB,CAAH,AEDyB,CAACsB,EFCEvB,CAAC,AEDR,CFCSU,AEDA,CAAT,EAAYS,KAAK,GAAGL,EFCb,EAAlC,EAAqDH,AED1B,CAAJ,MFCvB,CAA6D,GAA7D,CAAL,IAA0E,CAA9E,EAAiF,OAAO,IAAP,CAD1C,CACuD;AWJhG0F,ATIMjF,AIHJ,AFGEmB,ACLkCY,AGA/B,AEAP,INKIZ,EFAEnB,AIFAkC,CJEC,CAAC9B,AGL8B2B,EDK5B,ACL8B,CGAvB,CNKX,AEAMnB,AILMhC,CGCL,ATIAkB,AGL8BT,AGAxB,CGCL,ALEA,ADHwB,EGAhB,CFGL4C,AFEA,CFAC,AIFA,AFEA,CFAC5B,AIFA,AFEF,AILA,CFGC,AFFW,CEC3B,AEFyBiC,ONKd,AMLI,CNKYjD,AMLMD,CNKL,AMLb,CAAV,GNK2Bc,CAArB,EAAwBb,CAAC,GAAGa,CAA5B,CAAP;ASHJL,AXIA,AEAI,AIJJ,AFIEuB,ACN0C,AGAvC,EGELvB,CHHa,CJOXuB,EJAE/B,AMFAA,CNEJ,AMFK,CFEC,EFAE,AIFA6C,AFEAtB,COJC,ATIAlB,ESJE,EPIE,COLD,APKE,CFAC,AEAF,CEFG,AFHW,GFKRQ,CAAC,GAAG,CAAf,IAAoBH,KAAxB,EAA+B,UIFfiC,cAAc,GAAGnD,IAAI,CAACsB,GAAL,CAAS,CAAC,CAAV,EAAatB,IAAI,CAACsD,GAAL,CAAS,CAAT,EAAYtD,IAAI,CAACuD,KAAL,CAAWF,QAAQ,GAAG,CAAtB,CAAZ,CAAb,IAAsD,CAA3E,CAAR,GAAwF,CAFhG;AKCAtC,AXGA,AECIM,AILJ,AFKEH,AINF,AEAF,ECEEH,EPIEG,EJDKP,AECHU,AIFA2B,CJEC,AIFA,AEJA,EJME,COJC,ATIAjC,AIFAJ,CFECoB,COJC,CAAC,CAAD,CAFE,CPME,CJDI,AICH,CFAC,AEAF,AINRhC,CNMWqB,AENU,AIAtB,CRKgBrB,AECH,CFDI,AMDH,CNCIa,AMDHC,CJEC,CAACO,CAAC,EFDF,CAAQ,AECH,AIL1B,CNIqB,AECA,EFDWZ,CAAX,CAArB,AEC+BO,CFHQ,CAIvC,MEDuC,CAACF,MAAxB,CAAZ;ASHJ0D,AXKA,AEDG,AIFH,AFEE/B,ACPE,AGAC,EGGL+B,EPIE/B,KEFKhC,AFEA,COJC,ALEA,CFECuB,AIPG/B,CGGF,CAAC,ELEEgD,AELG,CGGN,ALEH,AFEO,AIPG9C,CJOF,COJC,APIF,CEFGS,AFLU,COGjB,CHHE,CAAWZ,CAAX,EAAcM,KFKnB,GACDG,AENM,CFML,AEN4B,CAAvB,CAAP,CFMKwC,CAAJ,GAAQrC,WAAW,GAAG,IAAI6C,KAAJ,CAAUhD,CAAC,GAAGwC,CAAJ,GAAQ,CAAlB,EAAqBtB,IAArB,CAA0B,GAA1B,CAAtB,GACAlB,CAAC,GAAG,CAAJ,GAAQG,WAAW,CAACC,KAAZ,CAAkB,CAAlB,EAAqBJ,CAArB,IAA0B,GAA1B,GAAgCG,WAAW,CAACC,KAAZ,CAAkBJ,CAAlB,CAAxC,GACA,OAAO,IAAIgD,KAAJ,CAAU,IAAIhD,CAAd,EAAiBkB,IAAjB,CAAsB,GAAtB,CAAP,GAAoC,uCAAmB3B,CAAnB,EAAsBC,IAAI,CAACsB,GAAL,CAAS,CAAT,EAAYf,CAAC,GAAGC,CAAJ,GAAQ,CAApB,CAAtB,EAA8C,CAA9C,CAH1C,CAP4B,CAUgE;AKRhF,ALSb,AFDGiC,ACRW,AGAR,AECP,CCDa,CAAb,CHFe,CJUXA,QCRe,CDQN,ACRO,CAACK,CDQNf,ACRO,CAACvB,CAAD,CAAP,EDQK,ACRO,CDQN,CAAD,CAAL,GCRkBuC,CDQNhB,ECRA,GDQK,CAAC,CAAD,CAAL,CAASnB,KAAT,CAAe,CAAf,CARE;AJS3B,AEAE,AEAA8B,ACTkC,AGCpC,IJQEA,GIRG,CJQC,CJAC,CACL/B,AIDMoB,CFACZ,CAAC,AGT8B8B,CHS7BxB,CGT+B,CDS7B,CAAC,CAAD,ACTgC,CDAlB,ACAS,AGC9B1B,CAAD,CNQI,AGTuCkD,CLUnC,CAACpC,AKVoC,CHS7Ba,EGTgC,CAAL,CHSvC,CFCP,AEDwBV,GFCH,CAArB,GAAyBL,EEDlB,CAAP,QFCoC,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAACC,KAAZ,CAAkB,CAAlB,CAA1C,GAAiED,WAD5D,EAEL,CAACZ,CAAC,CAACa,KAAF,CAAQJ,CAAC,GAAG,CAAZ,CAFI,CAAP;AWHa,AXOd,AEHE,AEACmC,ACVsD,AGCnD,GNNL,CEeEA,IAAI,COJgByD,CPIdrE,CITIhC,CAAC,GJSA,AITG,CJSF,CITT,CJSQ,IOJA,CAAuBsG,UAAvB,EAAmC;AAChDpC,ATID,AEX4B,ACHzB,AGIG,EGMLA,CPPO,AIFM,CJEb,IOOM,GAAG,qBAAaoC,UAAb,CAAT;AACA,APID,ACVE,AGAD,AECF,IAAItC,GFDGL,AECA,GAAGF,KAAK,CAACZ,GCKd0C,MAAM,ADLE,CAAgBvB,ECKfE,CHVI,AEKf,KCKiB,CAACqB,MAAhB;AACA,AHNA,AEAF,IACItB,GFDG,KECK,GAAG,CAAC,EFDRjE,CAAD,AECQ,EFDJQ,AECS,CFDb,EECQ,CCKbwF,CDLsB,GAAT,EAAa,GAAb,EAAiB,CCKlB,EDLC,CCKE9B,CDLmB,GAArB,ECKQ,ADLiB,CCKhB8B,EDLT,EAA6B,GAA7B,EAAiC,EAAjC,CCKb,CDLiD,GAApC,EAAwC,GAAxC,EAA4C,GAA5C,EAAgD,GAAhD,EAAoD,GAApD,EAAwD,GAAxD,EAA4D,GAA5D,EAAgE,GAAhE,CADf;ACOE,APIFlE,ACXE,AGAK,SGOEoC,ANPAhB,EAAE,AGAMlD,CAAC,CAACU,CHAL,CMOZ,APIa,ACXN,CDWOmC,ECXEE,CAAC,CAAClC,KDWpB,ACXkB,CAAQ,AGAT,CHAC,AGAeL,CJWL2B,AIXX,CHAYe,AGAtB,EHAW,IAAiBH,CAAC,CAAClC,KAAF,CDWQ,ACXAsC,CDWCN,CCXC,GAAG,CAAb,CAA1B,GDWT,ACXqDE,CAAnD,CDWqD;AOHtD,ANPA,AGDM,AEGQ,GFRA,eEQSmB,MAAT,EAAiB;ANUzB,AIZL,AEGA,MAAIC,CFHC,EJYShC,EMTL,GAAG+B,IFHNlE,CAAD,CEGa,CFHTQ,AEGUQ,CFHd,EJYA,CAAyBe,IMTlB,KNSP,AMT2Be,ENSS,OMT7B,IAAiCoB,MAAM,CAACjD,SAAP,KAAqB6B,SAAtD,GAAkEsB,iBAAlE,GAA6E,0BAAYJ,GAAG,CAACK,IAAJ,CAASH,MAAM,CAAClD,QAAhB,EAA0BsD,MAA1B,CAAZ,EAA+CJ,MAAM,CAACjD,SAAP,GAAmB,EAAlE,CAAzF;ANUA,AIbK,AEGL,MACIsD,CNSCnC,IAAL,AIbepC,CAAC,CAAC0D,CJaL3B,MIbG,AEIG,CFJOvB,CAAV,CJaM,AIbhB,AEIgB0D,CNSC9B,IAAV,CMTe,CAACoC,GNSG1B,KMTV,INST,CMT6BA,ENSE,GAA/B,GAAqCf,CMT5B,GAAgC,EAAhC,GNSqC,AMTAmC,CNSC9B,IAAV,CMTe,CAACoC,CNSC,EAAlE,KMT0D,CAAgB,CAAhB,IAAqB,EAD/E;ANWA,AIdK,AEGL,GFTa,GEWTC,CNSCpC,KAAL,GAAaN,KMTK,GAAGmC,CNSC,CAAC7B,IMTI,CNSd,AMTemC,KNSK1B,GMTZ,KAAoBA,CNS5B,GAAgC,GAAhC,EMTQ,CNS8Bf,EMTE,EAAhC,GAAqCmC,ENSE,CAAC7B,GMTG,CAACmC,CNSd,GAAkB,EAArE,EMT0D,CAAgB,CAAhB,IAAqB,EAF/E;ANYA,AIdA,AEEA,MAGIE,CNSCpC,AIdA,IJcL,EMTW,CNSCP,EMTEmC,EFLRlE,CAAD,EAAIQ,CAAJ,AEKe,CNSC,AMTAkE,CNSCpC,IAAV,EMTE,GNSiBQ,EMTEA,ONSrB,EMTE,CNS6B,EMTE,CNSjC,EMTE,CNSmCf,EMTEmC,MAAM,CNSC,AMTAQ,CNSCpC,IAAV,EMTE,CNSe,EAAlE,AMToE,EAHpE;ANaA,AIfK,AEEL,MAIIV,CNSCW,IIfUvC,CAAC,CJehB,AIfiB4D,CEML,ENSE7B,CMTCmC,MAAM,CFNN,AEMOtC,CNSC,AIfMpB,CJeL+B,AIfT,CAAV,KJeS,AMTC,KNSoBO,AMTAA,SNSrB,AMTC,GNSgC,AMTAsB,ENSjC,GAAsCrC,SAAS,CAACQ,EMT/C,GAA2C,CNSN,GAAmB,EAAvE,uBMTyEyB,GAAG,CAACK,IAAJ,CAASH,MAAM,CAACtC,QAAhB,EAA0B+C,MAA1B,CAAf,CAJ1D;ANcA,AIhBK,AEEL,GFTa,GEcTC,CNSCpC,IAAL,EMTW,CNSC,CAAC,CAACT,AMTAmC,MAAM,CAACU,ENSE,CAACpC,IAAxB,AMTc,KAAmBM,SAAnB,GAA+B,GAA/B,GAAqCoB,MAAM,CAACU,OAAP,GAAiB,EALpE;ANeA,AIhBA,AECA,MAMIC,CNSC1D,AIhBA,IEOI,CNST,EMTY+C,CNSCnC,GIhBP/B,CAAD,CEOa,CAAC6E,GNSG,CAAC1D,CMTX,INSC,CMTgB2B,INSIA,KMTrB,GAA6B,CNS5B,EMTD,CNSiCA,EMTEoB,MAAM,CNSxC,AMTyCW,GNSG,CAAC9C,CMTX,GAAe,EAN9D,GNemE,CAACZ,KAApE;AACA,AIjBK,AECL,MAOI2D,CNSCrC,EMTE,EFRKxC,CJiBZ,AMTUiE,GNSG,AIjBG,CJiBF,AIjBG/D,CJiBF4B,CMTC,CAAC+C,EFRL,CAAW9E,AEQb,CFRE,EAAcM,CJiBF,CAACmC,AMTAK,KNSzB,CIjBY,CAAuB,CAAvB,CAAP,AEQK,GAA2B,KAA3B,GAAmCoB,MAAM,CAACY,GAAP,GAAa,EAP1D;ANiBA,AIlBK,GARQ,IJ0BRpC,SAAL,GAAiBX,SAAS,CAACW,SAAV,KAAwBI,SAAxB,GAAoCA,SAApC,GAAgD,CAACf,SAAS,CAACW,SAA5E;AACA,AIlBA,AESA,ONSKC,AIlBA,IJkBL,AMTSoC,GNSG,CAAC,CAAChD,EIlBR/B,CAAD,CESL,CFTSQ,AESUuB,EFTd,EJkBkB,CAACY,IAAxB,AMTA,EAA8B;ANU9B,AInBK,AEUHZ,IAAAA,GNSGa,IAAL,AInBe,EEUJ,CNSCb,EMTE,ONSO,CAACa,IAAV,KAAmBE,MInBF9C,CAAC,EJmBlB,CInBqB,EJmBU,CInB5B,AEUe+B,CNSlB,CInB0BvB,EJmBUuB,AInBjC,CAAV,IEUS,CAAZ,GNSuD,CAACa,IAAV,GAAiB,EAAjE;AACD,AIpBM,AEYH,GFrBW,KEqBPR,IAAI,GAAGL,SAAS,CAACK,IAArB;AFXF,AEWE,OFXGyB,CEYCxB,KAAK,GAAGN,SAAS,CAACM,GFtBX,EEqBX;ANUJF,AIpBE,AEUE,OFVG2B,CEYCxB,IAAI,GNQG,AMRAP,CNQCc,QMRQ,CNQxB,AMRyBP,CNQChC,GMVtB,GFrBW,EJ+Bf,GAAqC,YAAW;AAC9C,AIpBA,AESE,OFTG,CEYCiC,CNQC,KAAKH,AMRA,GAAGL,CNQR,AIpBD/B,CAAD,EJqBC,KAAKqC,AMTa,CAACE,INQlB,EMXL,CNaI,KAAKD,IAFJ,GAGD,KAAKC,MAHJ,IAIA,KAAKC,IAAL,GAAY,GAAZ,GAAkB,EAJlB,KAKA,KAAKrB,KAAL,KAAe2B,SAAf,GAA2B,EAA3B,GAAgC7C,IAAI,CAACsB,GAAL,CAAS,CAAT,EAAY,KAAKJ,KAAL,GAAa,CAAzB,CALhC,KAMA,KAAKsB,KAAL,GAAa,GAAb,GAAmB,EANnB,KAOA,KAAKC,SAAL,KAAmBI,SAAnB,GAA+B,EAA/B,GAAoC,MAAM7C,IAAI,CAACsB,GAAL,CAAS,CAAT,EAAY,KAAKmB,SAAL,GAAiB,CAA7B,CAP1C,KAQA,KAAKC,IAAL,GAAY,GAAZ,GAAkB,EARlB,IASD,KAAKC,IATX;AAUD,AI9BM,AESH,CNUJ,OMNQJ,GFbMvC,CEaF,GFbM,AEaH8B,CFbI5B,KAAL,CAAWH,CAAX,CEaU,CFbIM,AEaHkC,IAJrB,IFTU,CAAuB,EAAvB,EAA2BuB,WAA3B,EAAP;AAAA,AESH,GFrBW,KE0BP5C,KAAK,GAAGY,SAAS,CAACZ,KALtB;AFRF,AEQE,OFRG,CEcCsB,KAAK,GAAGV,EFdR/B,EAAD,KEckB,CAACyC,KANtB;AFRG,AEQH,QAOIC,GFfMzC,IAAI,CAACE,CEeF,GAAG4B,CFfN,CAAW/B,EAAX,EAAcM,GEeC,CAACoC,IFfhB,CAAuB,EAAvB,CAAP,CEQH;AFRG,AEQH,QAQIC,IAAI,GAAGZ,SAAS,CAACY,IARrB;AFrBW,AEqBX,QASIC,IAAI,GAAGb,SAAS,CAACa,IATrB,CAH4B,CAc5B;;AACA,QAAIA,IAAI,KAAK,GAAb,EAAkBH,KAAK,GAAG,IAAR,EAAcG,IAAI,GAAG,GAArB,CAAlB,CAEA;AAFA,SAGK,IAAI,CAACoC,qBAAYpC,IAAZ,CAAL,EAAwBF,SAAS,KAAKI,SAAd,KAA4BJ,SAAS,GAAG,EAAxC,GAA6CC,IAAI,GAAG,IAApD,EAA0DC,IAAI,GAAG,GAAjE,CAlBD,CAoB5B;;AACA,QAAIJ,IAAI,IAAKJ,IAAI,KAAK,GAAT,IAAgBC,KAAK,KAAK,GAAvC,EAA6CG,IAAI,GAAG,IAAP,EAAaJ,IAAI,GAAG,GAApB,EAAyBC,KAAK,GAAG,GAAjC,CArBjB,CAuB5B;AACA;;AACA,QAAI4C,MAAM,GAAG1C,MAAM,KAAK,GAAX,GAAiBgC,cAAjB,GAAkChC,MAAM,KAAK,GAAX,IAAkB,SAAS2C,IAAT,CAActC,IAAd,CAAlB,GAAwC,MAAMA,IAAI,CAACuC,WAAL,EAA9C,GAAmE,EAAlH;AAAA,QACIC,MAAM,GAAG7C,MAAM,KAAK,GAAX,GAAiBkC,cAAjB,GAAkC,OAAOS,IAAP,CAAYtC,IAAZ,IAAoBgC,OAApB,GAA8B,EAD7E,CAzB4B,CA4B5B;AACA;AKnDJ,ALoDI;;AKnDJ,ALoDI,QAAIS,UAAU,GAAGL,qBAAYpC,IAAZ,CAAjB;AAAA,QACI0C,WAAW,GAAG,aAAaJ,IAAb,CAAkBtC,IAAlB,CADlB,CA/B4B,CAkC5B;AKtDJ,ALuDI;AACA;AKvDJ,ALwDI;;AKvDJ,ALwDIF,IAAAA,SAAS,GAAGA,SAAS,KAAKI,SAAd,GAA0B,CAA1B,GACN,SAASoC,IAAT,CAActC,IAAd,IAAsB3C,IAAI,CAACsB,GAAL,CAAS,CAAT,EAAYtB,IAAI,CAACsD,GAAL,CAAS,EAAT,EAAab,SAAb,CAAZ,CAAtB,GACAzC,IAAI,CAACsB,GAAL,CAAS,CAAT,EAAYtB,IAAI,CAACsD,GAAL,CAAS,EAAT,EAAab,SAAb,CAAZ,CAFN;;AKvDJ,AL2DI,aAAS6C,MAAT,CAAgBrE,KAAhB,EAAuB;AACrB,UAAIsE,WAAW,GAAGP,MAAlB;AAAA,UACIQ,WAAW,GAAGL,MADlB;AAAA,UAEI3E,CAFJ;AAAA,UAEOwC,CAFP;AAAA,UAEUyC,CAFV;;AAIA,UAAI9C,IAAI,KAAK,GAAb,EAAkB;AAChB6C,QAAAA,WAAW,GAAGJ,UAAU,CAACnE,KAAD,CAAV,GAAoBuE,WAAlC;AACAvE,QAAAA,KAAK,GAAG,EAAR;AACD,OAHD,MAGO;AACLA,QAAAA,KAAK,GAAG,CAACA,KAAT,CADK,CAGL;;AACA,YAAIyE,aAAa,GAAGzE,KAAK,GAAG,CAAR,IAAa,IAAIA,KAAJ,GAAY,CAA7C,CAJK,CAML;;AACAA,QAAAA,KAAK,GAAG0E,KAAK,CAAC1E,KAAD,CAAL,GAAe4D,GAAf,GAAqBO,UAAU,CAACpF,IAAI,CAACC,GAAL,CAASgB,KAAT,CAAD,EAAkBwB,SAAlB,CAAvC,CAPK,CASL;;AACA,YAAIC,IAAJ,EAAUzB,KAAK,GAAG,yBAAWA,KAAX,CAAR,CAVL,CAYL;;AACA,YAAIyE,aAAa,IAAI,CAACzE,KAAD,KAAW,CAA5B,IAAiCoB,IAAI,KAAK,GAA9C,EAAmDqD,aAAa,GAAG,KAAhB,CAb9C,CAeL;;AACAH,QAAAA,WAAW,GAAG,CAACG,aAAa,GAAIrD,IAAI,KAAK,GAAT,GAAeA,IAAf,GAAsBuC,KAA1B,GAAmCvC,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAAzB,GAA+B,EAA/B,GAAoCA,IAArF,IAA6FkD,WAA3G;AACAC,QAAAA,WAAW,GAAG,CAAC7C,IAAI,KAAK,GAAT,GAAeqB,QAAQ,CAAC,IAAIb,mCAAiB,CAAtB,CAAvB,GAAkD,EAAnD,IAAyDqC,WAAzD,IAAwEE,aAAa,IAAIrD,IAAI,KAAK,GAA1B,GAAgC,GAAhC,GAAsC,EAA9G,CAAd,CAjBK,CAmBL;AACA;;AACA,YAAIgD,WAAJ,EAAiB;AACf7E,UAAAA,CAAC,GAAG,CAAC,CAAL,EAAQwC,CAAC,GAAG/B,KAAK,CAACJ,MAAlB;;AACA,iBAAO,EAAEL,CAAF,GAAMwC,CAAb,EAAgB;AACd,gBAAIyC,CAAC,GAAGxE,KAAK,CAAC2E,UAAN,CAAiBpF,CAAjB,CAAJ,EAAyB,KAAKiF,CAAL,IAAUA,CAAC,GAAG,EAA3C,EAA+C;AAC7CD,cAAAA,WAAW,GAAG,CAACC,CAAC,KAAK,EAAN,GAAWhB,OAAO,GAAGxD,KAAK,CAACL,KAAN,CAAYJ,CAAC,GAAG,CAAhB,CAArB,GAA0CS,KAAK,CAACL,KAAN,CAAYJ,CAAZ,CAA3C,IAA6DgF,WAA3E;AACAvE,cAAAA,KAAK,GAAGA,KAAK,CAACL,KAAN,CAAY,CAAZ,EAAeJ,CAAf,CAAR;AACA;AACD;AACF;AACF;AACF,OAvCoB,CAyCrB;;;AACA,UAAIgC,KAAK,IAAI,CAACD,IAAd,EAAoBtB,KAAK,GAAGiD,KAAK,CAACjD,KAAD,EAAQ4E,QAAR,CAAb,CA1CC,CA4CrB;;AACA,UAAIhF,MAAM,GAAG0E,WAAW,CAAC1E,MAAZ,GAAqBI,KAAK,CAACJ,MAA3B,GAAoC2E,WAAW,CAAC3E,MAA7D;AAAA,UACIiF,OAAO,GAAGjF,MAAM,GAAGK,KAAT,GAAiB,IAAIsC,KAAJ,CAAUtC,KAAK,GAAGL,MAAR,GAAiB,CAA3B,EAA8Ba,IAA9B,CAAmCS,IAAnC,CAAjB,GAA4D,EAD1E,CA7CqB,CAgDrB;;AACA,UAAIK,KAAK,IAAID,IAAb,EAAmBtB,KAAK,GAAGiD,KAAK,CAAC4B,OAAO,GAAG7E,KAAX,EAAkB6E,OAAO,CAACjF,MAAR,GAAiBK,KAAK,GAAGsE,WAAW,CAAC3E,MAArC,GAA8CgF,QAAhE,CAAb,EAAwFC,OAAO,GAAG,EAAlG,CAjDE,CAmDrB;;AACA,cAAQ1D,KAAR;AACE,aAAK,GAAL;AAAUnB,UAAAA,KAAK,GAAGsE,WAAW,GAAGtE,KAAd,GAAsBuE,WAAtB,GAAoCM,OAA5C;AAAqD;;AAC/D,aAAK,GAAL;AAAU7E,UAAAA,KAAK,GAAGsE,WAAW,GAAGO,OAAd,GAAwB7E,KAAxB,GAAgCuE,WAAxC;AAAqD;;AAC/D,aAAK,GAAL;AAAUvE,UAAAA,KAAK,GAAG6E,OAAO,CAAClF,KAAR,CAAc,CAAd,EAAiBC,MAAM,GAAGiF,OAAO,CAACjF,MAAR,IAAkB,CAA5C,IAAiD0E,WAAjD,GAA+DtE,KAA/D,GAAuEuE,WAAvE,GAAqFM,OAAO,CAAClF,KAAR,CAAcC,MAAd,CAA7F;AAAoH;;AAC9H;AAASI,UAAAA,KAAK,GAAG6E,OAAO,GAAGP,WAAV,GAAwBtE,KAAxB,GAAgCuE,WAAxC;AAAqD;AAJhE;;AAOA,aAAO7D,QAAQ,CAACV,KAAD,CAAf;AACD;;AAEDqE,IAAAA,MAAM,CAACjF,QAAP,GAAkB,YAAW;AAC3B,aAAOyB,SAAS,GAAG,EAAnB;AACD,KAFD;;AAIA,WAAOwD,MAAP;AACD;;AAED,WAASS,YAAT,CAAsBjE,SAAtB,EAAiCb,KAAjC,EAAwC;AACtC,QAAI+E,CAAC,GAAGlB,SAAS,EAAEhD,SAAS,GAAG,8BAAgBA,SAAhB,CAAZ,EAAwCA,SAAS,CAACa,IAAV,GAAiB,GAAzD,EAA8Db,SAAhE,EAAjB;AAAA,QACImE,CAAC,GAAGjG,IAAI,CAACsB,GAAL,CAAS,CAAC,CAAV,EAAatB,IAAI,CAACsD,GAAL,CAAS,CAAT,EAAYtD,IAAI,CAACuD,KAAL,CAAW,uBAAStC,KAAT,IAAkB,CAA7B,CAAZ,CAAb,IAA6D,CADrE;AAAA,QAEIiF,CAAC,GAAGlG,IAAI,CAACmG,GAAL,CAAS,EAAT,EAAa,CAACF,CAAd,CAFR;AAAA,QAGIjB,MAAM,GAAGhB,QAAQ,CAAC,IAAIiC,CAAC,GAAG,CAAT,CAHrB;AAIA,WAAO,UAAShF,KAAT,EAAgB;AACrB,aAAO+E,CAAC,CAACE,CAAC,GAAGjF,KAAL,CAAD,GAAe+D,MAAtB;AACD,KAFD;AAGD;;AAED,SAAO;AACLM,IAAAA,MAAM,EAAER,SADH;AAELiB,IAAAA,YAAY,EAAEA;AAFT,GAAP;AAID","file":"sunburst.6212ddf0.js","sourceRoot":"..","sourcesContent":["export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","export {default as formatDefaultLocale, format, formatPrefix} from \"./defaultLocale.js\";\nexport {default as formatLocale} from \"./locale.js\";\nexport {default as formatSpecifier, FormatSpecifier} from \"./formatSpecifier.js\";\nexport {default as precisionFixed} from \"./precisionFixed.js\";\nexport {default as precisionPrefix} from \"./precisionPrefix.js\";\nexport {default as precisionRound} from \"./precisionRound.js\";\n","import { format } from 'd3-format';\n\nconsole.log(format);\n"]}